https://github.com/phaserjs/template-react
https://github.com/slysnek/rs-clone/blob/develop/src/game/entity.ts


https://github.com/amcolash/farming-game/tree/master
https://www.binpress.com/create-mobile-html5-farming-game/

--- for tiles ----
https://github.com/Blockost/farming-rpg/tree/master
https://github.com/jhvozdovich/stardew_harvest_crossing/tree/master/src
https://github.com/mluogh/grontown/blob/main/public/assets/tilesets/CREDITS-trees.txt


--- daynight ----
https://github.com/amcolash/farming-game/blob/master/src/farm/land.ts
https://github.com/amcolash/farming-game/blob/master/src/game/daynight.ts



--- chat ----
https://codepen.io/ramilulu/pen/mrNoXw

--- sprite tools ----
https://www.leshylabs.com/apps/sstool/


-----  scene change -------
https://phaser.discourse.group/t/how-to-correctly-switch-back-and-forth-between-scenes/8011/2

-----  bullets -------
https://github.com/phaserjs/examples/blob/master/public/src/physics/matterjs/bullet%20pool.js


-----  sprite interiors -------
https://gif-superretroworld.itch.io/interior-pack ( Super_Retro_World_Interior_pack_week42 )

-----  chatgpt alternatives or self host-------
https://github.com/joonspk-research/generative_agents/issues/115
https://medium.com/@haribaskar.dhanabalan/airllm-unleashed-2e32dae74c3d


-----  map chunks and size -------
https://www.dynetisgames.com/2018/02/24/manage-big-maps-phaser-3/
https://steamcommunity.com/sharedfiles/filedetails/?id=911484377
https://stardew.info/planner/#
https://www.reddit.com/r/StardewValley/comments/n4vb35/i_made_a_stardew_valley_map/#lightbox
https://steamuserimages-a.akamaihd.net/ugc/547557414802664989/2437A282C43F60554DE44956A3463424C8426947/?imw=1024&imh=829&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true

-----  game ai python -------
https://github.com/a16z-infra/ai-town
https://github.com/mluogh/eastworld/

*** tasks ***

- deselect toolbar with different button
- nearby tile map utils
- seed cursor corn - tomato cursor must be on
- water can task
- chat task
- tasks remove timeout and set interval. On each interval check for cancel status
- land do not set interactive when crop ready and there is a selected cursor. 
- at cursors remove  
    const tileGround = this.map.getTileAt(
                    pointerTileX,
                    pointerTileY,
                    false,
                    "Ground"
    );
find landEntity directly from pointer x, y check ExternalInteractionCursor
- when chat disable inventory button
- item destroy sprites. Check memory
- h function 
public setResource(resource: GenericItem) {
        this.destruct.addResource(resource);
}
 na fixei apo ta map objects kai ta external call na ginontai

item.getDestruct().addResource(resource)




- prompt helpers to return llm messages with user role and system role.
- check eastern world prompts.
- add TaskManager.ts and proxy all tasks to Npc and player characters.
- all game events emit from scene game. Check chatManager.ts
- on stamina decrease calculate char speed this.gridEngine.setSpeed(this.getIdTag(), 1);
-------- done -----
- when player plot land (animation) lock player movement with wasd. Set state machine
- set growth for crop based on time from clock and not from phaser
- when pick crop farmLandMap set hasCrop false
- task abstract class
- when seed plant add first frame with opacity like land
- seed task remove item from inventory
- replace weeding with Tillage
- diagonal movement ( https://annoraaq.github.io/grid-engine/examples/8-dir-crowd/ )



*** etc ***

----
check get_guardrail_query, generate_functions_from_actions https://github.com/mluogh/eastworld/blob/main/game/prompt_helpers.py
check https://github.com/a16z-infra/ai-town/blob/main/convex/agent/conversation.ts for  messages: [role: 'system'....] messages: [role: 'user'....] groups
-----

function matchRecipies(

    ingridients[object_id]=amount
               [object_id]=amount
) {
    recipes[
        {
            id
            ingridients[object_id]=amount_required
                       [object_id]=amount_required
            
            item_result = ()=>{call_to_func at create item, return storable}
        }

    ]

    return [recipes]
}

----
NPC search item(s) pattern

class ScanningNPC extends Phaser.GameObjects.Sprite {
  constructor(scene, x, y) {
    super(scene, x, y, 'npc');
    
    scene.add.existing(this);
    scene.physics.add.existing(this);

    this.body.setCollideWorldBounds(true);
    this.body.setBounce(0.2);
    this.body.setGravityY(300);

    this.createScanningArea();
    this.setupPathfinding();
    this.setupItemDetection();
  }

  createScanningArea() {
    // Define the scanning area dimensions
    this.scanningRadius = 200;
    this.scanningArea = new Phaser.Geom.Circle(this.x, this.y, this.scanningRadius);
  }

  setupPathfinding() {
    // Implement pathfinding logic here
    // Use BFS or A* algorithm to find paths around obstacles
  }

  setupItemDetection() {
    // Set up spatial partitioning or quad tree
    this.spatialIndex = new QuadTree(new Phaser.Geom.Rectangle(0, 0, 800, 600));
    
    // Populate spatial index with items
    this.scene.children.each(child => {
      if (child instanceof Item) {
        this.spatialIndex.insert(child);
      }
    });
  }

  update() {
    // Pathfinding logic here
    const target = this.findClosestItem();
    if (target) {
      this.moveTo(target.x, target.y);
    } else {
      // Wander around randomly if no items found
      this.wanderAround();
    }
    
    // Check for collisions with items
    this.checkCollisions();
  }

  findClosestItem() {
    let closestDistance = Infinity;
    let closestItem;

    this.spatialIndex.query(this.scanningArea, (item) => {
      const distance = Phaser.Math.Distance.BetweenPoints(this, item);
      if (distance < closestDistance) {
        closestDistance = distance;
        closestItem = item;
      }
    });

    return closestItem;
  }

  moveTo(x, y) {
    // Implement movement towards target position
  }

  wanderAround() {
    // Implement random wandering behavior
  }

  checkCollisions() {
    // Check for collisions with items in scanning area
    // Handle collision detection and item collection
  }
}

class Item extends Phaser.GameObjects.Sprite {
  constructor(scene, x, y) {
    super(scene, x, y, 'item');
    scene.add.existing(this);
    scene.physics.add.existing(this);

    this.body.setImmovable(true);
  }
}




***** 
Pattern 1: Spiral Search
The NPC follows a spiral pattern, gradually increasing its radius while searching.
wanderAround() {
  const angleStep = Math.PI / 180; // Adjust speed of rotation
  const radiusStep = 5; // Increase radius each iteration
  
  this.angle += angleStep;
  
  // Calculate new position
  const newX = this.x + Math.cos(this.angle) * this.radius;
  const newY = this.y + Math.sin(this.angle) * this.radius;
  
  // Update radius
  this.radius += radiusStep;
  
  // Move towards new position
  this.setVelocityX((newX - this.x) * 100); // Adjust speed as needed
  this.setVelocityY((newY - this.y) * 100);
}

***** 
Pattern 2: Zigzag Search
The NPC alternates directions in a zigzag pattern.

wanderAround() {
  const angleStep = Math.PI / 180;
  const zigzagStep = Math.PI / 90; // Adjust frequency
  
  this.angle += angleStep + (zigzagStep * (Math.floor(this.frame % 2)));
  
  // Calculate new position
  const newX = this.x + Math.cos(this.angle) * this.radius;
  const newY = this.y + Math.sin(this.angle) * this.radius;
  
  // Move towards new position
  this.setVelocityX((newX - this.x) * 100);
  this.setVelocityY((newY - this.y) * 100);
}
***** 
Pattern 3: Randomized Grid Search
The NPC moves in a grid pattern with random turns.

wanderAround() {
  const gridSize = 50; // Size of each cell in the grid
  let direction = Phaser.Math.RND.pick(['up', 'down', 'left', 'right']);
  
  switch(direction) {
    case 'up':
      this.y -= gridSize;
      break;
    case 'down':
      this.y += gridSize;
      break;
    case 'left':
      this.x -= gridSize;
      break;
    case 'right':
      this.x += gridSize;
      break;
  }
  
  // Randomize turn frequency
  if (Phaser.Math.RND.between(1, 10) === 1) {
    direction = Phaser.Math.RND.pick(['up', 'down', 'left', 'right']);
  }
}

***** 
Pattern 4: Wave-like Search
The NPC follows a wave pattern, oscillating between two points.

wanderAround() {
  const waveAmplitude = 50;
  const waveFrequency = 0.01;
  const wavePhase = this.frame * waveFrequency;
  
  // Calculate wave values
  const waveX = waveAmplitude * Math.sin(wavePhase);
  const waveY = waveAmplitude * Math.cos(wavePhase);
  
  // Move towards the center of the wave
  const centerX = this.x + waveX;
  const centerY = this.y + waveY;
  
  // Move towards the center
  this.setVelocityX((centerX - this.x) * 50);
  this.setVelocityY((centerY - this.y) * 50);
}

***** 
Pattern 5: Randomized Sector Search
The NPC divides the area into sectors and randomly selects one to explore.

wanderAround() {
  const sectorSize = 90; // Size of each sector in degrees
  
  // Determine current sector
  const currentSector = Math.floor(this.angle / sectorSize);
  
  // Generate random sector
  const targetSector = Phaser.Math.RND.between(0, 360 / sectorSize);
  
  // Move towards the edge of the current sector
  const angleToEdge = (currentSector % sectorSize) * Math.PI / 180;
  const newX = this.x + Math.cos(angleToEdge) * this.radius;
  const newY = this.y + Math.sin(angleToEdge) * this.radius;
  
  // Move towards new position
  this.setVelocityX((newX - this.x) * 100);
  this.setVelocityY((newY - this.y) * 100);
}